Before (Check what unmapped <Tab> does):
  let expandtab = &expandtab
  set expandtab
  execute 'normal!' "A\<Tab>"
  let expanded_line = getline('.')
  execute 'normal' "\<Undo>"
  set noexpandtab
  execute 'normal!' "A\<Tab>"
  let noexpanded_line = getline('.')
  execute 'normal' "\<Undo>"
  let &expandtab = expandtab

After (Restore expandtab):
  let &expandtab = expandtab

Given (Tabs):
  	

Execute (Append <Tab> with expandtab):
  AssertEqual "\t", getline('.')
  set expandtab
  execute 'normal' "A\<Tab>"

Then (Assert that tabs are produced):
  AssertEqual noexpanded_line, getline('.')
  AssertEqual "\t\t", getline('.')

Execute (Append <Tab> with noexpandtab):
  AssertEqual "\t", getline('.')
  set noexpandtab
  execute 'normal' "A\<Tab>"

Then (Assert that tabs are produced):
  AssertEqual noexpanded_line, getline('.')
  AssertEqual "\t\t", getline('.')

Given (Spaces):
   

Execute (Append <Tab> with expandtab):
  AssertEqual ' ', getline('.')
  set expandtab
  execute 'normal' "A\<Tab>"

Then (Assert that spaces are produced):
  AssertEqual expanded_line, getline('.')
  Assert getline('.') =~# '^  \+$'

Execute (Append <Tab> with noexpandtab):
  AssertEqual ' ', getline('.')
  set noexpandtab
  execute 'normal' "A\<Tab>"

Then (Assert that spaces are produced):
  AssertEqual expanded_line, getline('.')
  Assert getline('.') =~# '^  \+$'

Given (Nothing):
  

Execute (Append <Tab> with expandtab):
  AssertEqual '', getline('.')
  set expandtab
  execute 'normal' "A\<Tab>"

Then (Assert that spaces are produced):
  AssertEqual expanded_line, getline('.')
  Assert getline('.') =~# '^ \+$'

Execute (Append <Tab> with noexpandtab):
  AssertEqual '', getline('.')
  set noexpandtab
  execute 'normal' "A\<Tab>"

Then (Assert that tabs are produced):
  AssertEqual noexpanded_line, getline('.')
  AssertEqual "\t", getline('.')

Given (Neither spaces nor tabs):
  asdf

Execute (Append <Tab> with expandtab):
  AssertEqual 'asdf', getline('.')
  set expandtab
  execute 'normal' "A\<Tab>"

Then (Assert that spaces are produced):
  AssertEqual expanded_line, getline('.')
  Assert getline('.') =~# '^asdf \+$'

Execute (Append <Tab> with noexpandtab):
  AssertEqual 'asdf', getline('.')
  set noexpandtab
  execute 'normal' "A\<Tab>"

Then (Assert that tabs are produced):
  AssertEqual noexpanded_line, getline('.')
  AssertEqual "asdf\t", getline('.')
